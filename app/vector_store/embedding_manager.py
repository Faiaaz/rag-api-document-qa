"""
Embedding manager for generating text embeddings
"""
from typing import List, Union, Optional
import numpy as np
from sentence_transformers import SentenceTransformer
import os

from app.models import DocumentChunk


class EmbeddingManager:
    """Manages text embeddings using sentence transformers"""
    
    def __init__(self, model_name: str = "all-MiniLM-L6-v2"):
        """
        Initialize the embedding manager
        
        Args:
            model_name: Name of the sentence transformer model to use
        """
        self.model_name = model_name
        self.model = None
        self.embedding_dimension = None
        self._load_model()
    
    def _load_model(self):
        """Load the sentence transformer model"""
        try:
            print(f"Loading embedding model: {self.model_name}")
            self.model = SentenceTransformer(self.model_name)
            self.embedding_dimension = self.model.get_sentence_embedding_dimension()
            print(f"Model loaded successfully. Embedding dimension: {self.embedding_dimension}")
        except Exception as e:
            raise RuntimeError(f"Failed to load embedding model {self.model_name}: {str(e)}")
    
    def generate_embeddings(self, texts: Union[str, List[str]]) -> np.ndarray:
        """
        Generate embeddings for text(s)
        
        Args:
            texts: Single text string or list of text strings
            
        Returns:
            Numpy array of embeddings
        """
        if self.model is None:
            raise RuntimeError("Embedding model not loaded")
        
        try:
            # Convert single text to list
            if isinstance(texts, str):
                texts = [texts]
            
            # Generate embeddings
            embeddings = self.model.encode(texts, convert_to_numpy=True)
            
            return embeddings
            
        except Exception as e:
            raise RuntimeError(f"Failed to generate embeddings: {str(e)}")
    
    def generate_embedding_for_chunk(self, chunk: DocumentChunk) -> np.ndarray:
        """
        Generate embedding for a single document chunk
        
        Args:
            chunk: DocumentChunk object
            
        Returns:
            Numpy array of embedding
        """
        return self.generate_embeddings(chunk.content)
    
    def generate_embeddings_for_chunks(self, chunks: List[DocumentChunk]) -> np.ndarray:
        """
        Generate embeddings for multiple document chunks
        
        Args:
            chunks: List of DocumentChunk objects
            
        Returns:
            Numpy array of embeddings
        """
        texts = [chunk.content for chunk in chunks]
        return self.generate_embeddings(texts)
    
    def get_embedding_dimension(self) -> int:
        """Get the dimension of embeddings generated by this model"""
        return self.embedding_dimension
    
    def get_model_info(self) -> dict:
        """Get information about the embedding model"""
        return {
            "model_name": self.model_name,
            "embedding_dimension": self.embedding_dimension,
            "model_loaded": self.model is not None
        }
    
    def similarity(self, embedding1: np.ndarray, embedding2: np.ndarray) -> float:
        """
        Calculate cosine similarity between two embeddings
        
        Args:
            embedding1: First embedding vector
            embedding2: Second embedding vector
            
        Returns:
            Cosine similarity score (0-1)
        """
        # Normalize vectors
        norm1 = np.linalg.norm(embedding1)
        norm2 = np.linalg.norm(embedding2)
        
        if norm1 == 0 or norm2 == 0:
            return 0.0
        
        # Calculate cosine similarity
        similarity = np.dot(embedding1, embedding2) / (norm1 * norm2)
        return float(similarity)
    
    def batch_similarity(self, query_embedding: np.ndarray, embeddings: np.ndarray) -> np.ndarray:
        """
        Calculate similarity between query embedding and multiple embeddings
        
        Args:
            query_embedding: Query embedding vector
            embeddings: Array of embeddings to compare against
            
        Returns:
            Array of similarity scores
        """
        # Normalize query embedding
        query_norm = np.linalg.norm(query_embedding)
        if query_norm == 0:
            return np.zeros(len(embeddings))
        
        # Normalize all embeddings
        norms = np.linalg.norm(embeddings, axis=1)
        norms = np.where(norms == 0, 1, norms)  # Avoid division by zero
        
        # Calculate cosine similarities
        similarities = np.dot(embeddings, query_embedding) / (norms * query_norm)
        return similarities 